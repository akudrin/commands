CONFIGURE TOOLING
Configure user information for all local repositories

$ git config --global user.name "[name]"
Sets the name you want attached to your commit transactions

$ git config --global user.email "[email address]"
Sets the email you want attached to your commit transactions

$ git config --global color.ui auto
Enables helpful colorization of command line output

There are several ways to show your Git username:

$ git config user.name
$ git config --list

Also I can also see my Git username in the Git configuration file in my HOME directory on Unix systems, i.e., this file:

~/.gitconfig


CREATE REPOSITORIES
Start a new repository or obtain one from an existing URL
$ git init [project-name] (cd to the project's folder for which you want to use Git)
Creates a new local repository with the specified name
$ git clone [url]
Downloads a project and its entire version history

MAKE CHANGES
Review edits and craft a commit transaction

$ git status
Lists all new or modified files to be committed
$ git add [file]
Snapshots the file in preparation for versioning
$ git add .
Adds everything to the staging area
$ git add *.html
Adds only files with html extension to the staging area

If you create a file in your repository named .gitignore, Git uses 
it to determine which files and directories to ignore, before you make a commit. 
A .gitignore file should be committed into your repository, in order to share the 
ignore rules with any other users that clone the repository.

1. In Terminal, navigate to the location of your Git repository.
2. Enter touch .gitignore to create a .gitignore file.

Official list of recommended .gitignore files for many popular operating systems, 
environments, and languages: https://github.com/github/gitignore

For Java here is the recommended content of .gitignore file:

# Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*


$ git reset [file]
Unstages the file, but preserve its contents
$ git diff
Shows file differences not yet staged
$ git diff --staged
Shows file differences between staging and the last file version
$ git commit -m "[descriptive message]"
Records file snapshots permanently in version history
$ git commit -a -m "[descriptive message]"
Using -a skips the stating step. The command automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected.

GROUP CHANGES
Name a series of commits and combine completed efforts

$ git branch
Lists all local branches in the current repository
$ git branch [branch-name]
Creates a new branch
$ git checkout [branch-name]
Switches to the specified branch and updates the working directory
$ git merge [branch]
Combines the specified branch’s history into the current branch
$ git branch -d [branch-name]
Deletes the specified branch

REFACTOR FILENAMES
Relocate and remove versioned files

$ git rm [file]
Deletes the file from the working directory and stages the deletion
$ git rm --cached [file]
Removes the file from version control but preserves the file locally
$ git mv [file-original] [file-renamed]
Changes the file name and prepares it for commit

SUPPRESS TRACKING
Exclude temporary files and paths

*.log
build/
temp-*
A text file named .gitignore suppresses accidental versioning of files and paths matching the specified patterns

$ git ls-files --other --ignored --exclude-standard
Lists all ignored files in this project

SAVE FRAGMENTS
Shelve and restore incomplete changes

$ git stash
Temporarily stores all modified tracked files
$ git stash list
Lists all stashed changesets
$ git stash pop
Restores the most recently stashed files
$ git stash drop
Discards the most recently stashed changeset

REDO COMMITS
Erase mistakes and craft replacement history
$ git reset [commit]
Undoes all commits after [commit], preserving changes locally
$ git reset --hard [commit]
Discards all history and changes back to the specified commit

REVIEW HISTORY
Browse and inspect the evolution of project files

$ git log
Lists version history for the current branch
$ git log --follow [file]
Lists version history for a file, including renames
$ git diff [first-branch]...[second-branch]
Shows content differences between two branches
$ git show [commit]
Outputs metadata and content changes of the specified commit

SYNCHRONIZE CHANGES
Register a repository bookmark and exchange version history

$ git fetch [bookmark]
Downloads all history from the repository bookmark but does not merge these changes with the local repository current branch
$ git remote -v
With no arguments (-v), shows a list of existing remotes. With -v shows remote url after name.
$ git merge [bookmark]/[branch]
Combines bookmark’s branch into current local branch
$ git push [name of the remote repository] [branch name]
Uploads all local branch commits to GitHub and commit them to a branch
$ git pull
Downloads bookmark history and incorporates changes

Create branch and merge with the master (push to GitHub)
git branch - command to see all branches with the star next to currently used branch
git branch branch1 - creates another branch with the name branch1
git checkout branch1 - switch to another branch named branch1
git add . - now when you are in another branch (branch1) you can add all files to your stage so changes you do to them are visible
git commit -m "Created Project Object" - commit changes as required
git push - recommendation on a command you need to run 
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin branch1
git checkout master -  so we go back to master branch in order to merge master with branch1
git merge branch1 - merge master with branch1
git push - upload changes to github repository



